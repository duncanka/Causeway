--- src-orig/edu/stanford/nlp/trees/tregex/TregexPattern.java	2014-11-11 23:57:21.440509149 -0500
+++ src/edu/stanford/nlp/trees/tregex/TregexPattern.java	2014-11-12 17:45:26.695905623 -0500
@@ -815,66 +823,67 @@
     // todo: add an option to only print each tree once, regardless.  Most useful in conjunction with -w
     public void visitTree(Tree t) {
       treeNumber++;
-      if (printTree) {
-        pw.print(treeNumber+":");
-        pw.println("Next tree read:");
-        tp.printTree(t,pw);
-      }
       TregexMatcher match = p.matcher(t);
       if(printNonMatchingTrees) {
         if(match.find())
           numMatches++;
         else
           tp.printTree(t,pw);
-        return;
-      }
-      Tree lastMatchingRootNode = null;
-      while (match.find()) {
-        if(oneMatchPerRootNode) {
-          if(lastMatchingRootNode == match.getMatch())
-            continue;
-          else
-            lastMatchingRootNode = match.getMatch();
-        }
-        numMatches++;
-        if (printFilename && treebank instanceof DiskTreebank) {
-          DiskTreebank dtb = (DiskTreebank) treebank;
-          pw.print("# ");
-          pw.println(dtb.getCurrentFilename());
-        }
-        if(printSubtreeCode) {
-          pw.print(treeNumber);
-          pw.print(':');
-          pw.println(match.getMatch().nodeNumber(t));
-        }
-        if (printMatches) {
-          if(reportTreeNumbers) {
+      } else {
+	    Tree lastMatchingRootNode = null;
+	    while (match.find()) {
+	      if(oneMatchPerRootNode) {
+	        if(lastMatchingRootNode == match.getMatch())
+	          continue;
+	        else
+	          lastMatchingRootNode = match.getMatch();
+	      }
+	      numMatches++;
+	      if (printFilename && treebank instanceof DiskTreebank) {
+	         DiskTreebank dtb = (DiskTreebank) treebank;
+	         pw.print("# ");
+	         pw.println(dtb.getCurrentFilename());
+	      }
+          if(printSubtreeCode) {
             pw.print(treeNumber);
-            pw.print(": ");
-          }
-          if (printTree) {
-            pw.println("Found a full match:");
-          }
-          if (printWholeTree) {
-            tp.printTree(t,pw);
-          } else if (handles != null) {
-            if (printTree) {
-              pw.println("Here's the node you were interested in:");
-            }
-            for (String handle : handles) {
-              Tree labeledNode = match.getNode(handle);
-              if (labeledNode == null) {
-                System.err.println("Error!!  There is no matched node \"" + handle + "\"!  Did you specify such a label in the pattern?");
-              } else {
-                tp.printTree(labeledNode,pw);
-              }
-            }
-          } else {
-            tp.printTree(match.getMatch(),pw);
-          }
-          // pw.println();  // TreePrint already puts a blank line in
-        } // end if (printMatches)
-      } // end while match.find()
+            pw.print(':');
+            pw.println(match.getMatch().nodeNumber(t));
+	      }
+	      if (printMatches) {
+	        if(reportTreeNumbers) {
+	          pw.print(treeNumber);
+	          pw.print(": ");
+	        }
+	        if (printTree) {
+	          pw.println("Found a full match:");
+	        }
+	        if (printWholeTree) {
+	          tp.printTree(t,pw);
+	        } else if (handles != null) {
+	          if (printTree) {
+	             pw.println("Here's the node you were interested in:");
+	          }
+	          for (String handle : handles) {
+	            Tree labeledNode = match.getNode(handle);
+	            if (labeledNode == null) {
+	              System.err.println("Error!!  There is no matched node \"" + handle + "\"!  Did you specify such a label in the pattern?");
+                } else {
+	              tp.printTree(labeledNode,pw);
+	            }
+	          }
+	        } else {
+	          tp.printTree(match.getMatch(),pw);
+	        }
+	        // pw.println();  // TreePrint already puts a blank line in
+	      } // end if (printMatches)
+	    } // end while match.find()
+      } // end else (printNonMatchingTrees)
+
+      if (printTree) {
+        pw.print(treeNumber+":");
+        pw.println("Finished processing next tree:");
+        tp.printTree(t,pw);
+      }
     } // end visitTree

     public int numMatches() {
