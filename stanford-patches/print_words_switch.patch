reverted:
--- src-orig/edu/stanford/nlp/parser/lexparser/LexicalizedParser.java	2013-12-09 15:59:12.000000000 -0500
+++ src/edu/stanford/nlp/parser/lexparser/LexicalizedParser.java	2014-06-05 22:52:29.000000000 -0400
@@ -1331,6 +1331,9 @@
         argIndex = argIndex + ArgUtils.numSubArgs(args, argIndex) + 1;
         tunePath = treebankDescription.first();
         tuneFilter = treebankDescription.second();
+      } else if (args[argIndex].equalsIgnoreCase("-printWordsForUnparsed")) {
+    	op.testOptions.printWordsForUnparsed = true;
+    	argIndex += 1;
       } else {
         int oldIndex = argIndex;
         argIndex = op.setOptionOrWarn(args, argIndex);
reverted:
--- src-orig/edu/stanford/nlp/parser/lexparser/ParseFiles.java	2013-05-29 16:35:50.000000000 -0400
+++ src/edu/stanford/nlp/parser/lexparser/ParseFiles.java	2014-06-06 10:57:30.000000000 -0400 
@@ -269,7 +273,7 @@
     saidMemMessage = saidMemMessage || parserQuery.saidMemMessage();
     Tree ansTree = parserQuery.getBestParse();
     if (ansTree == null) {
+      printParseFailure(parserQuery, pwo);
-      pwo.println("(())");
       return;
     }
     if (ansTree != null) {
@@ -293,8 +297,8 @@
         treePrint.printTree(null, Integer.toString(num), pwo);
       } catch (Exception e) {
         pwErr.println("Sentence skipped: out of memory or error calling TreePrint.");
-        pwo.println("(())");
         e.printStackTrace();
+        printParseFailure(parserQuery, pwo);
       }
     }
     // crude addition of k-best tree printing
@@ -308,4 +312,14 @@
       treePrint.printTrees(trees, Integer.toString(num), pwo);
     }
   }
+
+  private void printParseFailure(ParserQuery parserQuery, PrintWriter pwo) {
+    List<Label> words = new ArrayList<Label>();
+    for (HasWord word : parserQuery.originalSentence()) {
+      words.add(new Word(word.word()));
+    }
+    treePrint.printWordsIfRequested(words, pwo, false);
+    pwo.println("(())");
+    pwo.println();
+  }
 }
reverted:
--- src-orig/edu/stanford/nlp/parser/lexparser/TestOptions.java	2013-04-27 22:48:08.000000000 -0400
+++ src/edu/stanford/nlp/parser/lexparser/TestOptions.java	2014-06-05 22:40:43.000000000 -0400
@@ -274,6 +274,12 @@
    * negative consequence that output is not quite as nicely ordered.
    */
   public int testingThreads = 1;
+  
+  /**
+   * If this is true and "words" is one of the selected formats for output, the
+   * parser will output words even if the parse failed.
+   */
+  public boolean printWordsForUnparsed = false;
 
   /**
    * Determines method for print trees on output.
reverted:
--- src-orig/edu/stanford/nlp/trees/TreePrint.java	2013-12-20 18:35:36.000000000 -0500
+++ src/edu/stanford/nlp/trees/TreePrint.java	2014-06-05 22:51:21.000000000 -0400
@@ -329,6 +329,31 @@
       }
     }
   }
+  
+  public void printWordsIfRequested(List<Label> words, final PrintWriter pw, final boolean inXml) {
+    if (!formats.containsKey("words")) {
+    	return;
+    }
+
+    if (inXml) {
+      List<Label> sentUnstemmed = words;
+      pw.println("  <words>");
+      int i = 1;
+      for (Label w : sentUnstemmed) {
+        pw.println("    <word ind=\"" + i + "\">" + XMLUtils.escapeXML(w.value()) + "</word>");
+        i++;
+      }
+      pw.println("  </words>");
+    } else {
+      String sent = Sentence.listToString(words, false);
+      if(ptb2text) {
+        pw.println(PTBTokenizer.ptb2Text(sent));
+      } else {
+        pw.println(sent);
+        pw.println();
+      }
+    }
+  }
 
 
   /** Print the internal part of a tree having already identified it.
@@ -346,26 +371,7 @@
       outputTree = outputTree.prune(new BobChrisTreeNormalizer.EmptyFilter());
     }
 
+    printWordsIfRequested(outputTree.yield(), pw, inXml);
-    if (formats.containsKey("words")) {
-      if (inXml) {
-        ArrayList<Label> sentUnstemmed = outputTree.yield();
-        pw.println("  <words>");
-        int i = 1;
-        for (Label w : sentUnstemmed) {
-          pw.println("    <word ind=\"" + i + "\">" + XMLUtils.escapeXML(w.value()) + "</word>");
-          i++;
-        }
-        pw.println("  </words>");
-      } else {
-        String sent = Sentence.listToString(outputTree.yield(), false);
-        if(ptb2text) {
-          pw.println(PTBTokenizer.ptb2Text(sent));
-        } else {
-          pw.println(sent);
-          pw.println();
-        }
-      }
-    }
 
     if (propertyToBoolean(options, "removeTopBracket")) {
       String s = outputTree.label().value();
@@ -1009,4 +1015,7 @@
     pw.println(toString(dependencies, format, includeTags));
   }
 
+  public boolean printsFormat(String format) {
+	  return formats.containsKey(format);
+  }
 }
